const multer = require("multer");
const xlsx = require("xlsx");
const upload = multer({ dest: "uploads/" });
const fs = require("fs");
const iconv = require("iconv-lite");
const path = require("path");

const Student = require("../Models/studentModel");
const User = require("../Models/userModel");
const { default: mongoose } = require("mongoose");
const Teacher = require("../Models/teacherModel");
const { isDataView } = require("util/types");

const checkUserStatus = async (email) => {
  const user = await User.findOne({ email });
  return user ? true : false; // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏∞‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö true
};

//uploadfile
const uploadedFile = async (req, res) => {
  try {
    const io = req.app.get("socketio");
    if (!req.file) {
      return res.status(400).json({ message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå" });
    }

    const filePath = req.file.path;
    const fileType = path
      .extname(req.file.originalname)
      .toLowerCase()
      .replace(".", "");

    if (fileType === "xls") {
      const fileBuffer = fs.readFileSync(filePath);
      const decodedBuffer = iconv.decode(fileBuffer, "win874");
      fs.writeFileSync(filePath, decodedBuffer);
    }

    const workbook = xlsx.readFile(filePath);
    const sheetName = workbook.SheetNames[0];
    const worksheet = workbook.Sheets[sheetName];
    const data = xlsx.utils.sheet_to_json(worksheet);

    if (fileType === "xlsx") {
      console.log("üìÑ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå Excel:", data.slice(1, 4));
      fs.unlink(filePath, (error) => {
        if (error) console.error("‚ùå ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", error);
      });
      return res.json(data);
    }

    const studentLists = data.slice(6, -2); // ‡∏Ç‡πâ‡∏≤‡∏° 6 ‡πÅ‡∏ñ‡∏ß‡πÅ‡∏£‡∏Å ‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡πâ‡∏ô 3 ‡πÅ‡∏ñ‡∏ß‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢

    async function processStudents(studentLists) {
      for (const student of studentLists) {
        let updatedData = { ...student };
        const [studentId, studentName, studentEmail] = Object.values(
          updatedData
        ).slice(1, 4);

        if (!studentEmail) continue; // ‡∏Ç‡πâ‡∏≤‡∏°‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏µ‡πÄ‡∏°‡∏•

        let findUser = await User.findOne({ email: studentEmail });

        const profileImage = `https://ui-avatars.com/api/?name=${encodeURIComponent(
          studentEmail
        )}&background=random`;

        if (!findUser) {
          // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÉ‡∏´‡∏°‡πà
          const createUser = new User({
            email: studentEmail,
            name: studentName,
            role: "student",
            img: profileImage,
            isDeleted: false,
          });
          await createUser.save();

          // ‡∏™‡∏£‡πâ‡∏≤‡∏á Student ‡πÅ‡∏•‡∏∞‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Å‡∏±‡∏ö User
          const createStudent = new Student({
            studentID: studentId,
            user: createUser._id,
          });
          await createStudent.save();

          // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï user ‡πÉ‡∏´‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏Å‡∏±‡∏ö student
          await User.findByIdAndUpdate(createUser._id, {
            roleData: createStudent._id,
            roleRef: "Student",
          });
          // ‚úÖ emit ‡∏ú‡πà‡∏≤‡∏ô socket ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏° user ‡πÉ‡∏´‡∏°‡πà
          io.emit("userAdded", {
            message: "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå",
            user: {
              _id: createUser._id,
              email: createUser.email,
              name: createUser.name,
              img: createUser.img,
              role: createUser.role,
            },
          });
        } else if (!findUser.roleData) {
          // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ User ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ Student, ‡∏™‡∏£‡πâ‡∏≤‡∏á Student ‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏° roleData
          const createStudent = new Student({
            studentID: studentId,
            user: findUser._id,
          });
          await createStudent.save();

          await User.findByIdAndUpdate(findUser._id, {
            roleData: createStudent._id,
          });
        }
      }
    }

    await processStudents(studentLists);
    // ‚úÖ ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à
    fs.unlink(filePath, (error)=> {
      if (error) console.error("‚ùå ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", err);
    })
    

    res.json({ message: "‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!" });
  } catch (error) {
    console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:", error);
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå" });
  }
};

//get student
const getAllStudents = async (req, res) => {
  try {
    const students = await Student.find({ isDeleted: false })
      .populate({
        path: "user",
        select: "name email isDeleted",
        match: { isDeleted: false },
      })
      .select("studentID user"); // ‡πÄ‡∏û‡∏¥‡πà‡∏° studentID ‡πÉ‡∏ô‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå

    res.status(200).json(students);
  } catch (error) {
    res.status(500).json({ message: "Error fetching students" });
  }
};

//Soft Delete ‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤
const softDeleteStudent = async (req, res) => {
  try {
    const { studentId } = req.params;
    console.log("üîç studentIds ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å frontend:", req.body);

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ studentId ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (!mongoose.Types.ObjectId.isValid(studentId)) {
      return res.status(400).json({ message: "studentId ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
    }

    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏î‡πâ‡∏ß‡∏¢ studentId
    const student = await Student.findOneAndUpdate(
      { _id: studentId },
      { isDeleted: true, deletedAt: new Date() },
      { new: true }
    );

    if (!student) {
      return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤" });
    }

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ isDeleted ‡πÉ‡∏ô User ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
    if (student.user) {
      await User.findByIdAndUpdate(student.user, {
        isDeleted: true,
        deletedAt: new Date(),
      });
    }
    const io = req.app.get("socketio");
    io.emit("studentDeleted", studentId);

    res.status(200).json({ message: "‡∏•‡∏ö‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß (Soft Delete)" });
  } catch (error) {
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤" });
  }
};

const softDeleteMultipleStudents = async (req, res) => {
  try {
    const { studentIds } = req.body;

    if (!Array.isArray(studentIds) || studentIds.length === 0) {
      return res
        .status(400)
        .json({ message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πà‡∏á studentIds ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
    }

    const validObjectIds = studentIds.filter((id) =>
      mongoose.Types.ObjectId.isValid(id)
    );

    // ‡∏î‡∏∂‡∏á student ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤‡∏ß‡πà‡∏≤ user ‡πÑ‡∏´‡∏ô‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
    const studentsBeforeUpdate = await Student.find({
      _id: { $in: validObjectIds },
    });

    const userIdsToUpdate = studentsBeforeUpdate
      .filter((student) => student.user)
      .map((student) => new mongoose.Types.ObjectId(student.user)); // üëà ‡πÅ‡∏õ‡∏•‡∏á‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô ObjectId

    console.log("‚úÖ ‡∏à‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï userIds:", userIdsToUpdate);

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Student
    const studentUpdate = await Student.updateMany(
      { _id: { $in: validObjectIds } },
      { $set: { isDeleted: true, deletedAt: new Date() } }
    );

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï User
    const userUpdate = await User.updateMany(
      { _id: { $in: userIdsToUpdate } },
      { $set: { isDeleted: true, deletedAt: new Date() } }
    );

    console.log("üü¢ Student update:", studentUpdate);
    console.log("üü¢ User update:", userUpdate);

    const io = req.app.get("socketio");
    io.emit("studentsDeleted", validObjectIds);

    res.status(200).json({
      message: "‡∏•‡∏ö‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß (Soft Delete)",
      studentModifiedCount: studentUpdate.modifiedCount,
      userModifiedCount: userUpdate.modifiedCount,
    });
  } catch (error) {
    console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ soft delete:", error);
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤" });
  }
};

// ‚úÖ ‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô (Restore) ‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤
const restoreMultipleStudents = async (req, res) => {
  try {
    const { studentIds } = req.body;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ studentIds ‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏≤‡∏£‡πå‡πÄ‡∏£‡∏¢‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (!Array.isArray(studentIds) || studentIds.length === 0) {
      return res
        .status(400)
        .json({ message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πà‡∏á studentIds ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
    }

    const validObjectIds = studentIds.filter((id) =>
      mongoose.Types.ObjectId.isValid(id)
    );

    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô
    const studentsBeforeUpdate = await Student.find({
      _id: { $in: validObjectIds },
    });

    // ‡∏î‡∏∂‡∏á userId ‡∏à‡∏≤‡∏Å student
    const userIdsToUpdate = studentsBeforeUpdate
      .map((student) => student.user)
      .filter((student) => new mongoose.Types.ObjectId(student.user)); // ‡∏Å‡∏£‡∏≠‡∏á‡∏Ñ‡πà‡∏≤ null ‡∏´‡∏£‡∏∑‡∏≠ undefined ‡∏≠‡∏≠‡∏Å

    //update student
    const studentUpdate = await Student.updateMany(
      { _id: { $in: validObjectIds } },
      { $set: { isDeleted: false } }
    );

    //update user
    const userUpdate = await User.updateMany(
      { _id: { $in: userIdsToUpdate } },
      { $set: { isDeleted: false } }
    );

    res
      .status(200)
      .json({
        message: "‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß",
        studentModifiedCount: studentUpdate.modifiedCount,
        userModifiedCount: userUpdate.modifiedCount,
      });
  } catch (error) {
    console.error("Error restoring students:", error);
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" });
  }
};

const restoreStudents = async (req, res) => {
  try {
    const { studentIds } = req.body;
    console.log("üì• studentIds:", studentIds);

    if (!Array.isArray(studentIds)) {
      studentIds = [studentIds];
    }


    // ‡∏î‡∏∂‡∏á student ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤‡∏ß‡πà‡∏≤ user ‡πÑ‡∏´‡∏ô‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
    const students = await Student.find({ _id: { $in: studentIds } });
    console.log("üßç students:", students);

    // if (!students.length) {
    //   return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô" });
    // }

    const userIds = students.map((s) => s.user).filter(Boolean);
    console.log("üßë‚Äçüíª userIds:", userIds);

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï User isDeleted = false
    if (userIds.length > 0) {
      await User.updateMany(
        { _id: { $in: userIds } },
        { $set: { isDeleted: false } }
      );
    }
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï student isDeleted = false
    await Student.updateMany(
      { _id: { $in: studentIds } },
      { $set: { isDeleted: false } }
    );

    res.status(200).json({ message: "‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢" });
  } catch (error) {
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î" });
  }
};

const getDeletedStudents = async (req, res) => {
  try {
    const students = await Student.find({ isDeleted: true })
      .populate({
        path: "user",
        select: "name email isDeleted",
        match: { isDeleted: true },
      })
      .select("studentID user");

    const filtered = students.filter((s) => s.user !== null);

    res.status(200).json(filtered);
  } catch (error) {
    console.error("Error fetching deleted students:", error);
    res.status(500).json({ message: "Error fetching deleted students" });
  }
};

const getDeletedUsers = async (req, res) => {
  try {
    const deletedUsers = await User.find({
      isDeleted: true,
      role: { $in: ["student", "teacher"] },
    }).select("name email role isDeleted deletedAt");

    const students = await Student.find({ isDeleted: true })
      .populate({
        path: "user",
        match: { isDeleted: true },
        select: "name email role isDeleted deletedAt",
      })
      .select("studentID user deletedAt");

    const teachers = await Teacher.find({ isDeleted: true })
      .populate({
        path: "user",
        match: { isDeleted: true },
        select: "name email role isDeleted deletedAt",
      })
      .select("deletedAt");

    const studentUserIds = students.map((s) => s.user?._id?.toString());

    const teacherMerged = teachers
      .filter(
        (t) =>
          t.user !== null && !studentUserIds.includes(t.user._id.toString())
      )
      .map((t) => ({
        _id: t._id,
        teacherId: t._id,
        studentID: null,
        user: t.user,
        deletedAt: t.deletedAt,
      }));

    const studentMerged = students
      .filter((s) => s.user !== null)
      .map((s) => ({
        _id: s._id,
        studentID: s.studentID,
        user: s.user,
        deletedAt: s.deletedAt,
      }));

    const merged = [...studentMerged, ...teacherMerged];

    res.status(200).json(merged);
  } catch (error) {
    console.error("‚ùå Error fetching deleted users:", error);
    res.status(500).json({ message: "Error fetching deleted users" });
  }
};

const deleteStudent = async (req, res) => {
  const studentId = req.params.studentId;

  try {
    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö ‡∏û‡∏£‡πâ‡∏≠‡∏° populate user ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
    const student = await Student.findById(studentId).populate("user");

    if (!student) {
      return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô" });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ user ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (student.user) {
      const userId = student.user._id;
      await User.findByIdAndDelete(userId); // ‡∏•‡∏ö user ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
    }

    // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
    await Student.findByIdAndDelete(studentId);

    res.status(200).json({ message: "‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÅ‡∏•‡∏∞‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß" });
  } catch (error) {
    console.error("‚ùå Error deleting student and user:", error);
    res
      .status(500)
      .json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÅ‡∏•‡∏∞‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ" });
  }
};

const deleteMultipleStudents = async (req, res) => {
  const { studentIds } = req.body; // ‡∏£‡∏±‡∏ö Array ‡∏Ç‡∏≠‡∏á studentIds ‡∏à‡∏≤‡∏Å frontend

  try {
    if (!studentIds || studentIds.length === 0) {
      return res.status(400).json({ message: "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏•‡∏ö" });
    }

    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö ‡∏û‡∏£‡πâ‡∏≠‡∏° populate user ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
    const students = await Student.find({ _id: { $in: studentIds } }).populate(
      "user"
    );

    if (students.length === 0) {
      return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö" });
    }

    // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
    const userIds = students
      .filter((student) => student.user) // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ user ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      .map((student) => student.user._id);

    if (userIds.length > 0) {
      await User.deleteMany({ _id: { $in: userIds } });
    }

    // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    await Student.deleteMany({ _id: { $in: studentIds } });

    res
      .status(200)
      .json({ message: "‡∏•‡∏ö‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÅ‡∏•‡∏∞‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß" });
  } catch (error) {
    console.error("‚ùå Error deleting multiple students:", error);
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô" });
  }
};

module.exports = {
  uploadedFile,
  upload,
  checkUserStatus,
  getAllStudents,
  softDeleteStudent,
  restoreMultipleStudents,
  softDeleteMultipleStudents,
  deleteStudent,
  deleteMultipleStudents,
  getDeletedStudents,
  restoreStudents,
  getDeletedUsers,
};
