const Notification = require("../Models/notificationModel");
const User = require("../Models/userModel");
const Quiz = require("../Models/quiz"); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏Å‡∏±‡∏ö Quiz

// üìå ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
exports.sendNotification = async (type, title, itemId, role, io) => {
  try {
    if (!io || !["student", "teacher"].includes(role) || !itemId) return;
    if (!["student", "teacher"].includes(role) || !itemId) return;

    // ‡∏î‡∏∂‡∏á User ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏•‡∏ö ‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö Role
    const users = await User.find({ role, deleted_at: null }, "_id");

    if (!users?.length) return;

    const notificationTypes = {
      quiz_add: { link: role === "student" ? `/Quiz/${itemId}` : `/quiz-teacher/${itemId}`, message: `üìù ‡∏°‡∏µ‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡∏°‡πà: ${title}` },
      quiz_update: { link: role === "student" ? `/Quiz/${itemId}` : `/quiz-teacher/${itemId}`, message: `üì¢ ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö: ${title}` },
      lesson_add: { link: role === "student" ? `/getAnimation3DById/${itemId}` : `/getAnimation3DById/${itemId}`, message: `üìö ‡∏°‡∏µ‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÉ‡∏´‡∏°‡πà: ${title}` },
      lesson_update: { link: role === "student" ? `/Lesson/${itemId}` : `/lesson-teacher/${itemId}`, message: `üì¢ ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô: ${title}` },
    };

    const { link, message } = notificationTypes[type] || {};
    if (!link || !message) {
      console.error("‚ùå Unknown notification type:", type);
      return;
    }

    // ‡πÉ‡∏ä‡πâ bulkWrite ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û
    const notificationsToInsert = users.map((user) => ({
      updateOne: {
        filter: { recipient: user._id, type, message, link, isRead: false },
        update: {
          message,
          type,
          link,
          isRead: false,
          recipient: user._id,
          userRole: role,
          createdAt: new Date(),
        },
        upsert: true,
        setDefaultsOnInsert: true
      }
    }));

    await Notification.bulkWrite(notificationsToInsert);

    // ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå
    users.forEach((user) => {
      io.to(user?._id.toString()).emit("newNotification", { message, link });
    });

  } catch (error) {
    console.error("‚ùå Error sending notification:", error);
  }
};

// // üìå ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Quiz
// exports.notificationQuizUpdate = async (quizTitle, quizId, role, io) => {
//   try {
//     if (!quizId || !quizTitle) return;

//     const type = "quiz_update";
//     const link = role === "student" ? `/Quiz/${quizId}` : `/quiz-teacher/${quizId}`;
//     const message = `üì¢ ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö: ${quizTitle}`;

//     const users = await User.find({ role, deleted_at: null }, "_id");

//     if (!users?.length) return;

//     const notifications = users.map((user) => ({
//       updateOne: {
//         filter: { recipient: user._id, type, message, link },
//         update: {
//           message,
//           type,
//           link,
//           isRead: false,
//           recipient: user._id,
//           userRole: role,
//           relatedQuiz: quizId,
//           createdAt: new Date(),
//         },
//         upsert: true,
//         setDefaultsOnInsert: true
//       }
//     }));

//     await Notification.bulkWrite(notifications);

//     users.forEach((user) => {
//       io.to(user?._id.toString()).emit("newNotification", { message, link });
//     });

//   } catch (error) {
//     console.error("‚ùå Error sending quiz notification:", error);
//   }
// };

// üìå ‡∏•‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö User
exports.deleteUserNotifications = async (userId) => {
  try {
    await Notification.deleteMany({ recipient: userId });
  } catch (error) {
    console.error("‚ùå Error deleting user notifications:", error);
  }
};

// üìå ‡∏•‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö Quiz
exports.deleteQuizNotifications = async (quizId) => {
  try {
    await Notification.deleteMany({ relatedQuiz: quizId });
  } catch (error) {
    console.error("‚ùå Error deleting quiz notifications:", error);
  }
};

exports.getUserNotifications = async (req, res) => {
  try {
    if (!req.user?.id) {
      return res.status(401).json({ message: "Unauthorized: User ID not found" });
    }

    const notifications = await Notification.find({ recipient: req.user.id }).sort({ createdAt: -1 });

    res.json(notifications);
  } catch (error) {
    console.error("‚ùå Error fetching user notifications:", error);
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô" });
  }
};


// üìå ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏õ‡πá‡∏ô "‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß"
exports.markAsRead = async (req, res) => {
  try {
    const { notificationIds } = req.body;

    if (!notificationIds?.length) {
      return res.status(400).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö ID ‡∏Ç‡∏≠‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô" });
    }

    const result = await Notification.updateMany(
      { _id: { $in: notificationIds } },
      { $set: { isRead: true }  }
    );

    if (result.matchedCount === 0) {
      return res.status(400).json({ message: "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÑ‡∏î‡πâ" });
    }

    res.json({ message: "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢" });
  } catch (error) {
    console.error("‚ùå Error in markAsRead:", error);
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô" });
  }
};

// üìå ‡∏•‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
exports.deleteNotification = async (req, res) => {
  try {
    const { notificationId } = req.params;

    // if (!mongoose.Types.ObjectId.isValid(notificationId)) {
    //   return res.status(400).json({ message: "ID ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
    // }

    if (!notificationId) {
      return res.status(400).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö ID ‡∏Ç‡∏≠‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô" });
    }

    const deletedNotification = await Notification.findByIdAndDelete(notificationId);

    if (!deletedNotification) {
      return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö" });
    }

    res.json({ message: "‡∏•‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢" });
  } catch (error) {
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô" });
  }
};
