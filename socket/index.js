const { Server } = require("socket.io");
const io = new Server(8800, {
  cors: {
    origin: "http://localhost:5173",  // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô URL ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
  },
});

const socketMap = new Map();

io.on("connection", (socket) => {
  console.log("New connection", socket.id);

  // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á userId ‡∏°‡∏≤
  socket.on("addNewUser", (userId) => {
    if (!userId) {
      console.log("Received undefined userId, ignoring...");
      return;
    }
    
    socketMap.set(userId, socket.id);
    console.log(`‚úÖ User added: ${userId} -> ${socket.id}`);
    console.log("üìå Current socket map:", Array.from(socketMap.entries())); // log ‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  });
  

  socket.on("sendMessage", (message) => {
    if (!message.chatId) {
        console.log("Error: message.chatId is undefined or invalid");
        return;
    }

    const recipientSocketId = socketMap.get(message.recipientId);
    console.log("Recipient ID:", message.recipientId);
    console.log("Recipient Socket ID:", recipientSocketId);

    if (!recipientSocketId) {
        console.log("Recipient not connected:", message.recipientId);
        return;
    }

    io.to(recipientSocketId).emit("getMessage", message);
    io.to(recipientSocketId).emit("getNotification", {
        _id: message._id, 
        chatId: message.chatId,
        senderId: message.senderId,
        recipientId: message.recipientId,
        isRead: false,
        date: new Date(),
    });

    console.log("Message sent to", recipientSocketId);
});

socket.on("markAsRead", ({ senderId, recipientId }) => {
  const senderSocketId = socketMap.get(senderId);
  if (!senderSocketId) return;
  
  // ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ‡∏ó‡∏£‡∏≤‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏≠‡πà‡∏≤‡∏ô
  io.to(senderSocketId).emit("messageRead", { senderId, recipientId });

  console.log(`‚úÖ Messages from ${senderId} marked as read by ${recipientId}`);
});



// socket.on("markAsRead", async ({ messageId, senderId }) => {
//   try {
//     // ‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Socket ID ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á
//     const senderSocketId = socketMap.get(senderId);
//     if (senderSocketId) {
//       // üîπ ‡πÅ‡∏à‡πâ‡∏á‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI
//       io.to(senderSocketId).emit("messageRead", { senderId });

//       // üîπ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ß‡πà‡∏≤‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ö‡∏ö notification)
//       io.to(senderSocketId).emit("notificationRead", { senderId });
//     }
//   } catch (error) {
//     console.error("‚ùå Error updating message as read:", error);
//   }
// });

// socket.on("markMessageAsRead", async ({ senderId }) => {

//       // ‚úÖ ‡∏™‡πà‡∏á event ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß
//       io.to(senderId).emit("messageRead", { senderId });

// });





  // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ disconnect
  socket.on("disconnect", () => {
    for (const [userId, socketId] of socketMap.entries()) {
      if (socketId === socket.id) {
        socketMap.delete(userId);  // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• userId ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
        break;
      }
    }
    console.log("User disconnected", socket.id);
    console.log("Updated socket map:", Array.from(socketMap.entries()));
  });
});
