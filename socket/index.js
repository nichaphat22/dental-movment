const { Server } = require("socket.io");
const io = new Server(8800, {
  cors: {
    origin: "http://localhost:5173",  // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô URL ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
  },
});

const socketMap = new Map();

io.on("connection", (socket) => {
  console.log("New connection", socket.id);

  // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á userId ‡∏°‡∏≤
  socket.on("addNewUser", (userId) => {
    if (!userId) {
      console.log("Received undefined userId, ignoring...");
      return;
    }
    
    socketMap.set(userId, socket.id);
    console.log(`‚úÖ User added: ${userId} -> ${socket.id}`);
    console.log("üìå Current socket map:", Array.from(socketMap.entries())); // log ‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  });
  

socket.on("sendMessage", (message, recipientId) => {
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ chatId ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  if (!message.chatId) {
    console.log("Error: message.chatId is undefined or invalid");
    return; // ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ chatId
  }

  console.log("message.chatId:", message.chatId);

  // ‡∏î‡∏∂‡∏á recipientSocketId ‡∏à‡∏≤‡∏Å socketMap
  const recipientSocketId = socketMap.get(message.recipientId);
  console.log("message.recipientId", message.recipientId);
  console.log("recipientSocketId", recipientSocketId);
  // ‚úÖ ‡∏ñ‡πâ‡∏≤ recipientId ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ return ‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ
  if (message.recipientId === "USER_ID_TO_IGNORE") {
    console.log("Skipping recipient:", message.recipientId);
    return;
  }

  if (recipientSocketId) {
    console.log("Sending message to recipient socket:", recipientSocketId);
    
    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö
    io.to(recipientSocketId).emit("getMessage", message);
    
    // ‡∏™‡πà‡∏á Notification ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö
    io.to(recipientSocketId).emit("getNotification", {
      _id: message._id, 
      chatId: message.chatId,
      senderId: message.senderId,
      recipientId: message.recipientId,
      relatedMessageId: message._id, 
      isRead: false,
      date: new Date(),
    });
  } else {
    console.log("Recipient not connected:", message.recipientId);
  }
});

  // ‚úÖ ‡∏£‡∏±‡∏ö event "markAsRead" ‡∏à‡∏≤‡∏Å client ‡πÅ‡∏•‡∏∞‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á‡∏ß‡πà‡∏≤‡∏ñ‡∏π‡∏Å‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß
socket.on("markAsRead", ({ senderId }) => {
  console.log(`üì® Notifications read for sender: ${senderId}`);

  const senderSocketId = socketMap.get(senderId);
  if (senderSocketId) {
      io.to(senderSocketId).emit("notificationRead", { senderId });
  }
});

  // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ disconnect
  socket.on("disconnect", () => {
    for (const [userId, socketId] of socketMap.entries()) {
      if (socketId === socket.id) {
        socketMap.delete(userId);  // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• userId ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
        break;
      }
    }
    console.log("User disconnected", socket.id);
    console.log("Updated socket map:", Array.from(socketMap.entries()));
  });
});
