const { Server } = require("socket.io");
const io = new Server(8800, {
  cors: {
    origin: "http://localhost:5173",  // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô URL ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
  },
});

// ‡πÉ‡∏ä‡πâ Map ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πá‡∏ö userId -> socketId ‡∏Ç‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á sender ‡πÅ‡∏•‡∏∞ recipient
const socketMap = new Map();


io.on("connection", (socket) => {
    console.log("New connection", socket.id);

    // ‚úÖ ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ ‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡πá‡∏ö userId -> socketId
    socket.on("addNewUser", ({ userId }) => {
        if (!userId) {
            console.log("Received undefined userId, ignoring...");
            return;
        }

        socketMap.set(userId, socket.id);
        socket.userId = userId; // ‡∏ú‡∏π‡∏Å userId ‡∏Å‡∏±‡∏ö socket

        console.log(`‚úÖ User added: ${userId} -> ${socket.id}`);
        console.log("üìå Current socket map:", Array.from(socketMap.entries()));
    });

    // ‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏∂‡∏á‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö ‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á
    socket.on("sendMessage", (message) => {
        if (!message.chatId || !message.senderId || !message.recipientId) {
            console.log("Error: Invalid message data", message);
            return;
        }

        // ‡∏´‡∏≤ socket ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö
        const recipientSocketId = socketMap.get(message.recipientId);
        const senderSocketId = socketMap.get(message.senderId); // ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤ sender ‡πÑ‡∏ß‡πâ‡∏î‡πâ‡∏ß‡∏¢

        console.log(`üì© Message from ${message.senderId} to ${message.recipientId}`);
        console.log("Sender Socket ID:", senderSocketId);
        console.log("Recipient Socket ID:", recipientSocketId);

        if (recipientSocketId) {
            // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö
            io.to(recipientSocketId).emit("getMessage", message);
            io.to(recipientSocketId).emit("getNotification", {
                _id: message._id,
                chatId: message.chatId,
                senderId: message.senderId,
                recipientId: message.recipientId,
                isRead: false,
                date: new Date(),
            });

            console.log("‚úÖ Message sent to", recipientSocketId);
        } else {
            console.log("‚ùå Recipient not connected:", message.recipientId);
        }
    });

    // ‚úÖ ‡πÅ‡∏à‡πâ‡∏á‡πÉ‡∏´‡πâ sender ‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏≠‡πà‡∏≤‡∏ô
    socket.on("markAsRead", ({ updatedMessages,senderId, recipientId }) => {
        console.log("‚úÖ dgfdffffffffmessage", updatedMessages);
        const senderSocketId = socketMap.get(senderId);
        const recipientSocketId = socketMap.get(recipientId); // ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á recipient

        if (senderSocketId) {
            io.to(senderSocketId).emit("messageRead", { senderId, recipientId,updatedMessages });
            console.log(`‚úÖ Messages from ${senderId} marked as read by ${recipientId}`);
        } else {
            console.log("‚ùå Sender is not connected:", senderId);
        }

        if (recipientSocketId) {
            console.log(`üìå Recipient (${recipientId}) is connected at: ${recipientSocketId}`);
        }
    });

    // ‚úÖ ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ disconnect ‡πÉ‡∏´‡πâ‡∏•‡∏ö‡∏à‡∏≤‡∏Å `socketMap`
    socket.on("disconnect", () => {
        if (socket.userId) {
            socketMap.delete(socket.userId);
            console.log(`‚ùå User disconnected: ${socket.userId}`);
        }
        console.log("Updated socket map:", Array.from(socketMap.entries()));
    });
});
